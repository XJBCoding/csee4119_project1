#!/usr/bin/env python
from socket import socket, AF_INET, SOCK_STREAM
import select
import time
import re
import sys
import thread
from multiprocessing import Process
class Proxy:
    def __init__(self,soc,fake_ip,server_ip):
        print('init: accepting client')
        self.client,_ = soc.accept()
        self.target = None
        self.request_url = server_ip
        self.fake_ip = (fake_ip,0)

    def getClientRequest(self):
        #print('receving from client')
        request = self.client.recv(4096)
        if request is None:
            return None
        return request

    def connectServer(self,request):
        self.target = socket(AF_INET, SOCK_STREAM)
        #print('connecting to server')
        self.target.bind(self.fake_ip)
        self.target.connect((self.request_url,8080))
        #print('sending message to server')
        self.target.send(request)
        self.blocking()

    def blocking(self):
        pat_big_buck = re.compile(b'bunny.f4m')
        pat_length = re.compile(b'Content-Length: .\w+')
        inputs = [self.client, self.target]
        while True:
            readable, writeable, errs = select.select(inputs, [], inputs, 3)
        #    print('select result:', readable)
            if errs:
                break
            for soc in readable:
                data = soc.recv(8192)
                if data:
                    if soc is self.client:
                        #print(data)
                        result = re.search(pat_big_buck,data,flags=0)
                        if result != None:
                            data.decode()
                            data = data.replace('bunny','bunny_nolist')
                            data.encode()
                        #print('    server')
                        self.target.send(data)
                    if soc is self.target:
                        #print('client')
                        result = re.search(pat_length,data,flags=0)
                        if result != None:
                            length = result.group(0)[16:]
                            #print(length)
                        self.client.send(data)
                else:
                    break
        self.client.close()
        self.target.close()

    def run(self):
        request = self.getClientRequest()
        if request:
            self.connectServer(request)


if __name__ == '__main__':
    print(sys.argv)
    listen_port = sys.argv[1]
    fake_ip = sys.argv[2]
    server_ip = sys.argv[3]
    proxySocket = socket(AF_INET, SOCK_STREAM)
    proxySocket.bind(('', int(listen_port)))
    proxySocket.listen(1)
    print('The proxy is ready to receive')

    while True:
        try:
            thread.start_new_thread(Proxy(proxySocket,fake_ip, server_ip).run, ())
        except Exception as e:
            print(e)

